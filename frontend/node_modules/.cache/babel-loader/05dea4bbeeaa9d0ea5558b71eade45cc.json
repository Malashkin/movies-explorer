{"ast":null,"code":"class MainApi {\n  constructor(_ref) {\n    let {\n      baseUrl\n    } = _ref;\n    this._baseUrl = baseUrl;\n  }\n\n  _checkResponse(res) {\n    if (res.ok) {\n      return Promise.resolve(res.json());\n    }\n\n    return Promise.reject(res);\n  }\n\n  makeSignUp(name, email, password) {\n    return fetch(`${this._baseUrl}/signup`, {\n      method: \"POST\",\n      credentials: \"include\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        name,\n        email,\n        password\n      })\n    }).then(this._checkResponse);\n  }\n\n  makeSignIn(email, password) {\n    return fetch(`${this._baseUrl}/signin`, {\n      method: \"POST\",\n      credentials: \"include\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    }).then(this._checkResponse);\n  }\n\n  checkToken(token) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: \"GET\",\n      credentials: \"include\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      }\n    }).then(this._checkResponse);\n  }\n\n  getUserInfo(token) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: \"GET\",\n      credentials: \"include\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`\n      }\n    }).then(this._checkResponse);\n  }\n\n  updateUserInfo(name, email, token) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: \"PATCH\",\n      credentials: \"include\",\n      headers: {\n        Accept: \"application/json\",\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        name,\n        email\n      })\n    }).then(this._checkResponse);\n  }\n\n  createMovie(movie, token) {\n    return fetch(`${this._baseUrl}/movies`, {\n      method: \"POST\",\n      credentials: \"include\",\n      headers: {\n        authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify({\n        country: movie.country || \"unknown\",\n        director: movie.director,\n        duration: movie.duration,\n        year: movie.year,\n        description: movie.description,\n        image: `https://api.nomoreparties.co${movie.image.url}`,\n        trailerLink: movie.trailerLink,\n        thumbnail: `https://api.nomoreparties.co${movie.image.formats.thumbnail.url}`,\n        movieId: movie.id,\n        nameRU: movie.nameRU,\n        nameEN: movie.nameEN || \"unknown\"\n      })\n    }).then(this._checkResponse);\n  }\n\n  deleteMovie(movieId, token) {\n    return fetch(`${this._baseUrl}/movies/${movieId}`, {\n      method: \"DELETE\",\n      credentials: \"include\",\n      headers: {\n        Accept: \"application/json\",\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(this._checkResponse);\n  }\n\n  getSavedMovies(token) {\n    return fetch(`${this._baseUrl}/movies`, {\n      credentials: \"include\",\n      headers: {\n        Accept: \"application/json\",\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(this._checkResponse);\n  }\n\n}\n/*\nconst mainApi = new MainApi({\n  baseUrl: \"http://localhost:3001\",\n});\n*/\n\n\nconst mainApi = new MainApi({\n  baseUrl: \"https://api.diploma.nomoredomains.sbs\"\n});\nexport default mainApi;","map":{"version":3,"names":["MainApi","constructor","baseUrl","_baseUrl","_checkResponse","res","ok","Promise","resolve","json","reject","makeSignUp","name","email","password","fetch","method","credentials","headers","Accept","body","JSON","stringify","then","makeSignIn","checkToken","token","Authorization","getUserInfo","updateUserInfo","createMovie","movie","authorization","country","director","duration","year","description","image","url","trailerLink","thumbnail","formats","movieId","id","nameRU","nameEN","deleteMovie","getSavedMovies","mainApi"],"sources":["/Users/mike/Desktop/Code/Projects/Diploma/movies-explorer-frontend/src/utils/MainApi.js"],"sourcesContent":["class MainApi {\n  constructor({ baseUrl }) {\n    this._baseUrl = baseUrl;\n  }\n\n  _checkResponse(res) {\n    if (res.ok) {\n      return Promise.resolve(res.json());\n    }\n    return Promise.reject(res);\n  }\n\n  makeSignUp(name, email, password) {\n    return fetch(`${this._baseUrl}/signup`, {\n      method: \"POST\",\n      credentials: \"include\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ name, email, password }),\n    }).then(this._checkResponse);\n  }\n\n  makeSignIn(email, password) {\n    return fetch(`${this._baseUrl}/signin`, {\n      method: \"POST\",\n      credentials: \"include\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ email, password }),\n    }).then(this._checkResponse);\n  }\n\n  checkToken(token) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: \"GET\",\n      credentials: \"include\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`,\n      },\n    }).then(this._checkResponse);\n  }\n\n  getUserInfo(token) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: \"GET\",\n      credentials: \"include\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${token}`,\n      },\n    }).then(this._checkResponse);\n  }\n\n  updateUserInfo(name, email, token) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: \"PATCH\",\n      credentials: \"include\",\n      headers: {\n        Accept: \"application/json\",\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ name, email }),\n    }).then(this._checkResponse);\n  }\n\n  createMovie(movie, token) {\n    return fetch(`${this._baseUrl}/movies`, {\n      method: \"POST\",\n      credentials: \"include\",\n      headers: {\n        authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n      body: JSON.stringify({\n        country: movie.country || \"unknown\",\n        director: movie.director,\n        duration: movie.duration,\n        year: movie.year,\n        description: movie.description,\n        image: `https://api.nomoreparties.co${movie.image.url}`,\n        trailerLink: movie.trailerLink,\n        thumbnail: `https://api.nomoreparties.co${movie.image.formats.thumbnail.url}`,\n        movieId: movie.id,\n        nameRU: movie.nameRU,\n        nameEN: movie.nameEN || \"unknown\",\n      }),\n    }).then(this._checkResponse);\n  }\n\n  deleteMovie(movieId, token) {\n    return fetch(`${this._baseUrl}/movies/${movieId}`, {\n      method: \"DELETE\",\n      credentials: \"include\",\n      headers: {\n        Accept: \"application/json\",\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\",\n      },\n    }).then(this._checkResponse);\n  }\n\n  getSavedMovies(token) {\n    return fetch(`${this._baseUrl}/movies`, {\n      credentials: \"include\",\n      headers: {\n        Accept: \"application/json\",\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\",\n      },\n    }).then(this._checkResponse);\n  }\n}\n/*\nconst mainApi = new MainApi({\n  baseUrl: \"http://localhost:3001\",\n});\n*/\nconst mainApi = new MainApi({\n  baseUrl: \"https://api.diploma.nomoredomains.sbs\",\n});\n\nexport default mainApi;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}